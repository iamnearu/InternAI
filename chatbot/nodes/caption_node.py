"""
File: caption_node.py
Th∆∞ m·ª•c: chatbot/nodes/

M·ª•c ƒë√≠ch:
- T·∫°o caption m√¥ t·∫£ n·ªôi dung ·∫£nh CCCD b·∫±ng Gemini Pro Vision.
- D√πng l√†m fallback n·∫øu OCR th·∫•t b·∫°i.
"""

import google.generativeai as genai
from PIL import Image

# ‚úÖ C·∫•u h√¨nh API key Gemini (b·∫°n ƒë√£ l·∫•y tr√™n Google AI Studio)
genai.configure(api_key="AIzaSyC6fS5gEB4WIuiXOMY-RRSDJOus8OnbjyU")  # üëâ NH·ªö thay b·∫±ng API key th·∫≠t

# ‚úÖ T·∫°o ƒë·ªëi t∆∞·ª£ng model Gemini h·ªó tr·ª£ ·∫£nh
model = genai.GenerativeModel("gemini-2.0-flash")

def generate_caption(image_path: str) -> str:
    """
    G·ª≠i ·∫£nh v√† prompt y√™u c·∫ßu m√¥ t·∫£ ·∫£nh CCCD b·∫±ng Gemini.

    Tham s·ªë:
        image_path (str): ƒê∆∞·ªùng d·∫´n ·∫£nh CCCD.

    Tr·∫£ v·ªÅ:
        str: M√¥ t·∫£ ·∫£nh (caption) do Gemini sinh ra.
    """
    image = Image.open(image_path).convert("RGB")
    prompt = "H√£y m√¥ t·∫£ n·ªôi dung ·∫£nh CCCD n√†y b·∫±ng ti·∫øng Vi·ªát, ch·ªâ mi√™u t·∫£ 3 tr∆∞·ªùng l√† s·ªë cƒÉn c∆∞·ªõc c√¥ng d√¢n, h·ªç v√† t√™n v√† ng√†y sinh."

    response = model.generate_content([prompt, image])
    return response.text.strip()

def caption_node(image_path: str) -> dict:
    """
    Node LangGraph: sinh caption t·ª´ ·∫£nh CCCD.

    Tr·∫£ v·ªÅ:
        dict: {
            "text": caption sinh ra,
            "success": True n·∫øu c√≥ k·∫øt qu·∫£,
            "error": n·∫øu l·ªói
        }
    """
    try:
        caption = generate_caption(image_path)
        return {
            "text": caption,
            "success": True
        }

    except Exception as e:
        return {
            "text": "",
            "success": False,
            "error": str(e)
        }
